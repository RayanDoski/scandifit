from flask import Blueprint, render_template, request, session, redirect, jsonify

from db import make_db_connection, insert_into_user, add_phonenumber_to_user

from flask_mail import Mail, Message
from db import mail

login_register = Blueprint('login_register', __name__)

@login_register.route("/register", methods=['GET', 'POST'])
def register():
    try:
        # Fetching info sent from frontend react
        data = request.get_json()

        name = data.get('name')
        email = data.get('email')
        phonenumber = data.get('phonenumber')
        password = data.get('password')

        # Make Database Connection
        db = make_db_connection()
        cursor = db.cursor()

        cursor.execute('select * from user where email = %s', (email))
        DoesEmailExist = cursor.fetchone()

        # Mail Check
        if DoesEmailExist:
            return jsonify(
                {
                    'success': False,
                    'message': f'Konot Med [{email}] Existerar Redan'
                }
            )
        else:

            # Inserting User Values Into User Table
            cursor.execute('insert into user (namn, email, password) values (%s, %s, %s)', (name, email, password))
            db.commit()

            # Getting the latest autogenerated Id
            uid = cursor.lastrowid

            # Logging Them In 
            session['user_id'] = uid

            # Did They enter a phone Number Or did they Leave It empty
            if phonenumber:
                cursor.execute('insert into phonenumber (uid, phonenumber) values (%s, %s)', (uid, phonenumber))
                db.commit()

            # for mail sending 
            msg = Message('Vi Har Tagit Emot Ditt Medelande', recipients=[email])
            msg.html = render_template('mail_welcome.html', namn=name)
            mail.send(msg)

            return jsonify(
                {
                    'success': True
                }
            )

    except:
        return jsonify({'success': False})
    finally:
        # Close Database Connection
        db.close()
        cursor.close()
    
@login_register.route("/login", methods=['GET', 'POST'])
def login():
    try:
        # Fetching info sent from frontend react
        data = request.get_json()

        email = data.get('email')
        password = data.get('password')

        # Make Database Connection
        db = make_db_connection()
        cursor = db.cursor()

        cursor.execute('select * from user where password = %s and email = %s', (password, email))
        user = cursor.fetchone()

        # authentication check
        if user:
            session['user_id'] = user[0]
            return jsonify({'success': True, 'id': user[0]})
        else:
            return jsonify({'success': False})
    except:
        return jsonify({'success': False})
    finally:
        # Close Database Connection
        db.close()
        cursor.close()
    
@login_register.route('/protected', methods=['GET'])
def protected():
    if 'user_id' in session:
        return jsonify({'success': True})
    else:
        return jsonify({'success': False})

# Code Is Not In Use

def is_logged_in():
    '''
    Function that checks whether or not the user is logged in by checking if the 'user_id' exists in the session object.

    Return:
    - id
    - name
    - email
    - password
    '''
    try:

        #Make Database Connection
        db = make_db_connection()
        cursor = db.cursor()

        if 'user_id' in session:
            cursor.execute('select * from user where id = %s', (session['user_id'],))
            data = cursor.fetchone()
            return session['user_id'], data[1], data[2], data[3]
        else:
            return None
    except:
        print('Fel Med Att Ta Emot Information Från Användare')
    finally:
        # Close Database Connection
        db.close()
        cursor.close()

def is_exklusiv():
    '''
    Function to check if the current user has exklusiv status or not. Returns a boolean value.
    '''
    try:

        #Make Database Connection
        db = make_db_connection()
        cursor = db.cursor()

        #are they logged in?
        user_data = is_logged_in()
        id = user_data[0]

        # Looking To See If They have exklusiv membership
        cursor.execute('select * from exklusiv where uid = %s', (id,))
        exklusiv = cursor.fetchone()
        return exklusiv

    finally:
        # Close Database Connection
        db.close()
        cursor.close()