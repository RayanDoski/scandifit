# render.yaml
# This blueprint defines your services on Render.
# It translates your docker-compose setup to Render's infrastructure.

services:
  # MySQL Database Service
  - type: mysql
    name: scandifit-db
    databaseName: scandifit # Corresponds to MYSQL_DATABASE
    user: scandifit_user # Corresponds to MYSQL_USER
    # It's highly recommended NOT to hardcode passwords in render.yaml.
    # Instead, set them via Render's dashboard after creation or use a secret management system.
    # For initial setup with a known password, you can set it here, but remove it for production best practice.
    # password: Rayan12345 # DANGER: Remove or manage securely!
    plan: free # Or 'starter', 'standard', 'pro' based on your needs
    ipAllowList: # Recommended for security: only allow connections from your Render services
      - private # Allows connections from other services in the same Render account
      # Add IP ranges for your own machine if you need to connect directly for development/admin
      # - 1.2.3.4/32 # Your specific IP address
    # Render manages the MySQL image and persistence for you.
    # No need for volumes like db_data or init.sql directly in render.yaml for a managed DB.
    # For init.sql, you might need to run initial migrations/schema setup from your backend.

  # Flask Backend Service
  - type: web
    name: scandifit-backend
    dockerfilePath: ./backend/Dockerfile # Path to your backend Dockerfile
    rootDir: ./backend # Build context for the Dockerfile
    plan: free # Or 'starter', 'standard', 'pro'
    autoDeploy: true
    numInstances: 1 # Number of instances (1 for free tier)
    port: 5000 # The port your Flask app listens on inside its container (as per Dockerfile EXPOSE or Flask run command)
    healthCheckPath: / # Optional: A path Render can ping to check if your service is healthy
    envVars:
      # Render automatically injects DB connection info for 'fromDatabase'
      - key: DATABASE_URL
        fromDatabase:
          name: scandifit-db
          property: connectionString # Provides the full connection string
      # If your backend expects separate variables:
      # - key: MYSQL_HOST
      #   fromDatabase:
      #     name: scandifit-db
      #     property: host
      # - key: MYSQL_USER
      #   fromDatabase:
      #     name: scandifit-db
      #     property: user
      # - key: MYSQL_PASSWORD
      #   fromDatabase:
      #     name: scandifit-db
      #     property: password
      # - key: MYSQL_DB
      #   fromDatabase:
      #     name: scandifit-db
      #     property: database
      - key: FLASK_ENV
        value: production
      # It's CRITICAL to manage sensitive environment variables securely.
      # DO NOT hardcode passwords here. Use Render's UI for secrets or a dedicated secret management.
      - key: MYSQL_PASSWORD # This should match what's set in the Render DB service or UI
        value: Rayan12345 # Replace with a securely set secret on Render, NOT hardcoded here
      # Add other necessary environment variables (e.g., SECRET_KEY)
      # - key: SECRET_KEY
      #   sync: false # Set this in Render UI, don't keep in render.yaml
    # Start command for your Flask app. Ensure this is what your Dockerfile uses or what Flask expects.
    startCommand: "flask run --host=0.0.0.0 --port=5000" # Adjust if you use Gunicorn or other WSGI server

  # React Frontend Service
  - type: web
    name: scandifit-frontend
    dockerfilePath: ./frontend/Dockerfile # Path to your frontend Dockerfile
    rootDir: ./frontend # Build context for the Dockerfile
    plan: free # Or 'starter', 'standard', 'pro'
    autoDeploy: true
    numInstances: 1
    port: 80 # The port your frontend web server (e.g., Nginx in Dockerfile) listens on
    healthCheckPath: / # Optional health check for frontend
    envVars:
      # Point frontend to the *public URL* of your backend service on Render
      - key: REACT_APP_API_URL # Or VITE_APP_API_URL, NEXT_PUBLIC_API_URL etc.
        value: https://scandifit-backend.onrender.com # Render will provide this public URL after deployment
      # Or, if you prefer, reference the internal service name (works for services in the same blueprint):
      # value: http://scandifit-backend:5000 # For internal communication within Render network